/*******
* Create function sr_geocode_event
* to have sr_cfs address info geocoded after inserts.
*
* NEED TO ENABLE DBLINK
* psql -d sr_data -f /usr/share/pgsql/contrib/dblink.sql
*
*/

CREATE OR REPLACE FUNCTION sr_getlocation_event() RETURNS TRIGGER 
AS $sr_getlocation_trigger$
DECLARE
BEGIN
IF TG_RELNAME='sr_cfs' THEN
	IF NEW.cfs_location IS NOT NULL THEN
		RETURN NEW;
	END IF;
	IF NEW.cfs_addr IS NULL THEN
		IF NEW.cfs_cross1 IS NULL AND NEW.cfs_cross2 IS NULL THEN
			/* NO GOOD -> RETURN cfs_location = -1 */
			NEW.cfs_location := -1;
		ELSE
		/* WE DO NOT HAVE A GOOD ADDR STR SO WE ARE USING CROSS STREETS */
			INSERT INTO sr_locations (pct, sector, source, address, cross1, cross2) VALUES ( NEW.cfs_pct, NEW.cfs_sector, 2, NEW.cfs_addr, NEW.cfs_cross1, NEW.cfs_cross2 );
			NEW.cfs_location := currval('sr_locations_id_seq');
		END IF;
	ELSE /* We have a GOOD Address String */
		INSERT INTO sr_locations (pct, sector, source, address, cross1, cross2) VALUES ( NEW.cfs_pct, NEW.cfs_sector, 1, NEW.cfs_addr, NEW.cfs_cross1, NEW.cfs_cross2 );
			NEW.cfs_location := currval('sr_locations_id_seq');
	END IF;
	RETURN NEW;
END IF;
END;
$sr_getlocation_trigger$
LANGUAGE 'plpgsql';
--- END FUNCTION ---

/* CREATE THE TRIGGER AND RUN ON ALL ROWS.*/

DROP TRIGGER sr_getlocation_trigger ON sr_cfs;
CREATE TRIGGER sr_getlocation_trigger
BEFORE INSERT OR UPDATE ON sr_cfs
    FOR EACH ROW EXECUTE PROCEDURE sr_getlocation_event();


/*  FUNCTION FOR ACTUAL GEOCODING... */

CREATE OR REPLACE FUNCTION sr_geocode_func(location_id integer) RETURNS integer 
AS $sr_geocode_func$
DECLARE
querystr text;
addressstr1 varchar(256);
therating INTEGER;
thegeomout geometry;
loc sr_locations%ROWTYPE;
BEGIN
	SELECT INTO loc * FROM sr_locations WHERE id=location_id;
	IF NOT FOUND THEN
		RETURN -1;
	END IF;
	IF loc.source = 2 THEN
		IF loc.cross1 IS NULL OR loc.cross2 IS NULL THEN
			/* NO GOOD - CROSS STREETS ARE NULL -> SET rating = -10 */
			therating := -10;
			UPDATE sr_locations SET rating = therating WHERE id = location_id;
		ELSE 
			/* PERFORM GEOCODE ON CROSS STREETS */
			querystr := 'SELECT rating, ST_Force_3D( ST_Transform(geomout, 4326)) AS sr_geomout FROM geocode_intersection(''' ||loc.cross1|| ''','''|| loc.cross2 || ''',''New York'', ''NY'',NULL, 1 ) ';
			RAISE NOTICE 'Query String===%===',querystr;
			SELECT INTO therating, thegeomout  g.rating, g.geomout FROM dblink('dbname=sr_geocoder', querystr) AS g(rating int, geomout geometry);
							
		END IF;
	ELSEIF loc.source = 1 THEN
		IF loc.address IS NULL THEN
			/* NO GOOD - ADDRESS IS NULL -> SET RATING = -11 */
			therating := -11;
			UPDATE sr_locations SET rating = therating WHERE id = location_id;
		ELSE
			/* PERFORM GEOCODE ON ADDRESS */
			addressstr1 := loc.address||', New York NY';
			querystr := 'SELECT rating, ST_Force_3D( ST_Transform( geomout, 4326) ) AS sr_geomout FROM geocode(''' || addressstr1 || ''', 1 )';
			RAISE NOTICE 'FULL ADDR TO GEOCODE===%===',addressstr1;
			RAISE NOTICE 'Query String===%===',querystr;
			SELECT INTO therating, thegeomout  g.rating, g.geomout FROM dblink('dbname=sr_geocoder', querystr) AS g(rating int, geomout geometry);
			IF therating IS NULL THEN
				therating := -5;
			END IF;
			UPDATE sr_locations SET rating = therating, sr_geom = thegeomout WHERE id = location_id;
		END IF;
	END IF;
	RETURN therating;
END;
$sr_geocode_func$
LANGUAGE 'plpgsql';
--- END FUNCTION ---


/*
		IF loc.cfs_cross1 IS NULL AND NEW.cfs_cross2 IS NULL THEN
			/* NO GOOD -> RETURN cfs_geocoded = false */
			NEW.cfs_location = -1;
		ELSE
			querystr := 'SELECT rating, ST_Force_3D( ST_Transform(geomout, 4326)) AS sr_geomout FROM geocode_intersection(''' ||NEW.cfs_cross1|| ''','''|| NEW.cfs_cross2 || ''',''New York'', ''NY'',NULL, 1 ) ';
			RAISE NOTICE 'Query String===%===',querystr;
			SELECT INTO therating, thegeomout  g.rating, g.geomout FROM dblink('dbname=sr_geocoder', querystr) AS g(rating int, geomout geometry);
			IF therating <= 10 THEN
				RAISE NOTICE 'Geocode Successful';
				NEW.sr_geom := thegeomout;
				NEW.cfs_geocoded := 'true';
			ELSE
				RAISE NOTICE 'Geocode Unsuccessful';
				NEW.cfs_geocoded := 'false';
			END IF;
		END IF;
	ELSE /* We have a GOOD Address String */
		addressstr1 := NEW.cfs_addr||', New York NY';
		querystr := 'SELECT rating, ST_Force_3D( ST_Transform( geomout, 4326) ) AS sr_geomout FROM geocode(''' || addressstr1 || ''', 1 )';
		RAISE NOTICE 'FULL ADDR TO GEOCODE===%===',addressstr1;
		RAISE NOTICE 'Query String===%===',querystr;
		SELECT INTO therating, thegeomout  g.rating, g.geomout FROM dblink('dbname=sr_geocoder', querystr) AS g(rating int, geomout geometry);
---		SELECT INTO therating, thegeomout  g.rating, g.geomout FROM dblink('dbname=sr_geocoder', 'SELECT rating, geomout FROM geocode( addressstr1, 1 ) AS geoval') AS g(rating int, geomout geometry);

		IF therating <= 10 THEN
			RAISE NOTICE 'Geocode Successful';
			NEW.sr_geom := thegeomout;
			NEW.cfs_geocoded := 'true';
		ELSE
			RAISE NOTICE 'Geocode Unsuccessful';
			NEW.cfs_geocoded := 'false';
		END IF;
	END IF;
	RETURN NEW;
*/





